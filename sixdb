#!/usr/bin/env python

# python executable for SixdeskDB
# Moonis Javed <monis.javed@gmail.com>,
# Riccardo De Maria <riccardo.de.maria@cern.ch>
# Xavier Valls Pla  <xavier.valls.pla@cern.ch>
# Danilo Banfi <danilo.banfi@cern.ch>
#
# This software is distributed under the terms of the GNU Lesser General Public
# License version 2.1, copied verbatim in the file ``COPYING''.

# In applying this licence, CERN does not waive the privileges and immunities
# granted to it by virtue of its status as an Intergovernmental Organization or
# submit itself to any jurisdiction.

import sys,os,time

if sys.version_info < (2, 6):
  print "SixDeskDB requires Python version >=2.6"
  sys.exit(1)

from sixdeskdb import SixDeskDB,Mad6tOut,RunDaVsTurns,PlotDaVsTurns,PlotCompDaVsTurns
#from dbtocentral,config

def str2bool(st):
  if(st=='True' or st=='true'):
    return True
  else:
    return False


class SixDB(object):
    def __init__(self,argsv):
        self.args=argsv[1:]
    def run(self):
        args=self.args
        if len(args)==0:
            self.help()
        elif len(args)==1:
            cmd=self.args[0]
            getattr(self,cmd)()
        else:
            study=self.args[0]
            cmd=self.args[1]
            if not hasattr(self,cmd):
                print "Error: command `%s' illegal"%cmd
                print self.help(cmd)
            else:
              try:
                getattr(self,cmd)(study)
              except Exception, e:
                print
                print "Error in `%s' command."%cmd
                import traceback
                print
                exc_type, exc_value, exc_tb = sys.exc_info()
                traceback.print_exception(exc_type, exc_value, exc_tb)
                #print "%s: %s"%(e.__class__.__name__,e.message)
                print
                self.help(cmd)
    def help(self,cmd=None):
        """Obtain help on commands
Usage: sixdb <cmd> <help>
        """
        cmds="load_dir info da  da_vs_turns plot_da_vs_turns plot_comp_da_vs_turns mad interactive".split()
        msg="""sixdb: command line interface of SixDeskDB
Usage: sixdb <study> <cmd> <options> or sixdb <cmd> help
        """
        if cmd is None:
            print msg
            print "Available commands are:"
            for cmd in cmds:
                doc=getattr(self,cmd).__doc__.splitlines()[0]
                print "%-11s: %s"%(cmd,doc)
            print
            print "To obtain help on commands use sixdb help <cmd>"
        elif cmd in cmds:
            print "%s:"%cmd,
            print getattr(self,cmd).__doc__
        else:
            print "Command not found"
            print "To get all command options type: sixdb help"
    def info(self,study):
       """Print basic infomation on the database.

Usage: sixdb <dbname> info
       """
       SixDeskDB(study).info()
    def da(self,study):
       """Compute DAres files from database.

Usage: sixdb <dbname> da [-force] [-nostd]
Options:
    -force Force recalculation of DA
    -nostd Do not add std column in .plot for backward compatibility
       """
       force=False
       nostd=False
       if '-force' in self.args:
          force=True
       if '-nostd' in self.args:
          nostd=True
       SixDeskDB(study).mk_da(force=force,nostd=nostd)
    def load_dir(self,study):
       """Create database from a SixDesk directory dir.

Usage: sixdb <studydir> load_dir
<studydir> is a directory that contains the sixdeskenv and sysenv
files, e.g. ~/w1/sixjobs or ~/w1/sixjobs/studies/job_tracking."""
       SixDeskDB.from_dir(study)
    def mad(self,study):
        """Analyse the output of mad6t (HL-LHC specific)

Usage: sixdb <dbname> mad"""
    def da_vs_turns(self,study):
       """Create database DA vs turns.

Usage: sixdb <dbname> da_vs_turns
    Options:
    -force         : force to recalculate the da vs turns
    -turnstep      : steps in the number of turns (default: 100)
    -tmax          : maximum number of turns 
                     (default: max. number of turns tracked) 
    -outfile       : survival data is saved in DAsurv.out
                     and the da_vs_turns in DA.out"""
       args=self.args
       try:
         db=SixDeskDB(study)
       except ValueError: 
         print('Error in da_vs_turns: database not found!')
         sys.exit(1)
       # define default values
       force=False
       turnstep=100
       outfile=False
       if '-force' in args: force=True
       if '-outfile' in args: outfile=True
       if '-turnstep' in args: turnstep=args[args.index('-turnstep')+1]
       RunDaVsTurns(db,force,outfile,turnstep)

    def plot_da_vs_turns(self,study):
       """Create survival and da vs turns plots.

Usage: sixdb <dbname> plot_da_vs_turns
    Options:
    -ampmaxsurv    : maximum amplitude for survival plot 
                     (default: max. amp tracked)
    -amprangedavst : minimum maximum amplitude for da vs turns
                     plots (default: min. and max. amplitude tracked)
    -tmax          : maximum number of turns 
                     (default: max. number of turns tracked) 
    -plotlog       : plot da vs turns in logscale (default: False)"""
       args=self.args
       try:
         db=SixDeskDB(study)
       except ValueError: 
         print('Error in da_vs_turns: database not found!')
         sys.exit(1)
       # define default values
       ampmaxsurv=max(max(db.get_amplitudes()))
       ampmaxdavst=max(max(db.get_amplitudes()))
       ampmindavst=min(min(db.get_amplitudes()))
       tmax=db.get_turnsl()
       plotlog=False
       if '-ampmaxsurv' in args: ampmaxsurv=args[args.index('-ampmaxsurv')+1]
       if '-amprangedavst' in args:
         ampmindavst=args[args.index('-amprangedavst')+1]
         ampmaxdavst=args[args.index('-amprangedavst')+2]
       if '-tmax' in args: tmax=args[args.index('-tmax')+1]
       if '-plotlog' in args: plotlog=True
       PlotDaVsTurns(db,ampmaxsurv,ampmindavst,ampmaxdavst,tmax,plotlog)
    def plot_comp_da_vs_turns(self,study):
       """Comparison of survival and da vs turns plots.

Usage: sixdb <dbname> plot_comp_da_vs_turns <compdbname>
    Options:
    -lblname       : labelname to be used for <dbname>
    -complblname   : labelname to be used for <compdbname>
    -ampmaxsurv    : maximum amplitude for survival plot 
                     (default: max. amp tracked)
    -amprangedavst : minimum maximum amplitude for da vs turns
                     plots (default: min. and max. amplitude tracked)
    -tmax          : maximum number of turns 
                     (default: max. number of turns tracked) 
    -plotlog       : plot da vs turns in logscale (default: False)"""
       args=self.args
       try:
         db=SixDeskDB(study)
       except ValueError:
         print('Error in plot_comp_da_vs_turns: database not found!')
         sys.exit(1)
       try:
         dbcomp=SixDeskDB(args[2])
       except ValueError:
         print('Error in plot_comp_da_vs_turns: database of comparison study not found!')
         sys.exit(1)
       # define default values
       lblname=db.LHCDescrip
       complblname=dbcomp.LHCDescrip
       amp=db.get_amplitudes()+dbcomp.get_amplitudes()
       ampmaxsurv=max(max(amp))
       ampmaxdavst=max(max(amp))
       ampmindavst=min(min(amp))
       tmax=max(db.get_turnsl(),dbcomp.get_turnsl())
       plotlog=False
       if '-lblname' in args: lblname=args[args.index('-lblname')+1]
       if '-complblname' in args: complblname=args[args.index('-complblname')+1]
       if '-ampmaxsurv' in args: ampmaxsurv=args[args.index('-ampmaxsurv')+1]
       if '-amprangedavst' in args:
         ampmindavst=args[args.index('-amprangedavst')+1]
         ampmaxdavst=args[args.index('-amprangedavst')+2]
       if '-tmax' in args: tmax=args[args.index('-tmax')+1]
       if '-plotlog' in args: plotlog=True
       PlotCompDaVsTurns(db,dbcomp,lblname,complblname,ampmaxsurv,ampmindavst,ampmaxdavst,tmax,plotlog)
    def interactive(self,study):
        """Open an IPython shell with a database loeaded as db
        Usage: sixdb <dbname> interactive
        """
        print
        import IPython
        import matplotlib.pyplot as pl
        import numpy, scipy
        db=SixDeskDB(study)
        print """job_hllhc10_test10.db open as db
Example:
print db.get_col('sturns1',1,45)
db.plot_col('sturns1',1,45)
db.plot_polar_col('sturns1',1)
"""
        print
        IPython.start_ipython(user_ns={'db':db},argv=['--pylab'])
    def set(self,study):
        """Redefine environment variables
        Usage: sixdb <dbname> set <key1> <value1> ...
        """
        keys=self.args[2::2]
        values=self.args[3::2]
        if len(keys)==len(values):
             lst=zip(keys,values)
             SixDeskDB(study).set_variable(lst,time.time())
        else:
             print "Error: Unmatched name value arguments"
    def missing_jobs(self,study):
        """Compute missing jobs
        Usage: sixdb <dbname> missing_jobs
        """
        SixDeskDB(study).missing_jobs()


if __name__=="__main__":
    import sys
    SixDB(sys.argv).run()
