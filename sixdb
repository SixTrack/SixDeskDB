#!/usr/bin/env python

# python executable for SixdeskDB
# Moonis Javed <monis.javed@gmail.com>,
# Riccardo De Maria <riccardo.de.maria@cern.ch>
# Xavier Valls Pla  <xavier.valls.pla@cern.ch>
# Danilo Banfi <danilo.banfi@cern.ch>
#
# This software is distributed under the terms of the GNU Lesser General Public
# License version 2.1, copied verbatim in the file ``COPYING''.

# In applying this licence, CERN does not waive the privileges and immunities
# granted to it by virtue of its status as an Intergovernmental Organization or
# submit itself to any jurisdiction.

import sys,os,time

if sys.version_info < (2, 6):
  print "SixDeskDB requires Python version >=2.6"
  sys.exit(1)

from sixdeskdb import SixDeskDB,Mad6tOut,RunDaVsTurns
#from dbtocentral,config

def str2bool(st):
  if(st=='True' or st=='true'):
    return True
  else:
    return False


class SixDB(object):
    def __init__(self,argsv):
        self.args=argsv[1:]
    def run(self):
        args=self.args
        if len(args)==0:
            self.help()
        elif len(args)==1:
            cmd=self.args[0]
            getattr(self,cmd)()
        else:
            study=self.args[0]
            cmd=self.args[1]
            try:
              getattr(self,cmd)(study)
            except Exception, e:
              print
              print "Error in `%s' command."%cmd
              import traceback
              print
              exc_type, exc_value, exc_tb = sys.exc_info()
              traceback.print_exception(exc_type, exc_value, exc_tb)
              #print "%s: %s"%(e.__class__.__name__,e.message)
              print
              self.help(cmd)
    def quiet(self):
        pass
    def help(self,cmd=None):
        """Obtain help on commands
Usage: sixdb <cmd> <help>
        """
        cmds="load_dir info da  da_vs_turns mad interactive".split()
        msg="""sixdb: command line interface of SixDeskDB
Usage: sixdb <study> <cmd> <options> or sixdb <cmd> help
        """
        if cmd is None:
            print msg
            print "Available commands are:"
            for cmd in cmds:
                doc=getattr(self,cmd).__doc__.splitlines()[0]
                print "%-11s: %s"%(cmd,doc)
            print
            print "To obtain help on commands use sixdb help <cmd>"
        elif cmd in cmds:
            print "%s:"%cmd,
            print getattr(self,cmd).__doc__
        else:
            print "Command not found"
    def info(self,study):
       """Print basic infomation on the database.

Usage: sixdb <dbname> info
       """
       SixDeskDB(study).info()
    def da(self,study):
       """Compute DAres files from database.

Usage: sixdb <dbname> da
       """
       force=False
       if '-force' in self.args:
          force=True
       SixDeskDB(study).mk_da(force)
    def load_dir(self,study):
       """Create database from a SixDesk directory dir.

Usage: sixdb <studydir> load_dir
<studydir> is a directory that contains the sixdeskenv and sysenv
files, e.g. ~/w1/sixjobs or ~/w1/sixjobs/studies/job_tracking."""
       SixDeskDB.from_dir(study)
    def mad(self,study):
        """Analyse the output of mad6t (HL-LHC specific)
            Usage: sixdb <dbname> mad"""
    def da_vs_turns(self,study):
       """Plot DA vs turns.
    Options:
    -createdaout   : create the DA.out files for the da vs turns
                     analysis (default: True)
    -turnstep      : steps in the number of turns (default: 100)
    -tmax          : maximum number of turn (default: 1.e6)s
    -ampmaxsurv    : maximum amplitude for survival plot 
                     (default: max. amp tracked)
    -amprangedavst : minimum maximum amplitude for da vs turns
                     plots (default: min. and max. amplitude tracked)
    -plotlog       : if True plot da vs turns in logscale 
                     (default: False)
    -comp <compdirname> <lblname> <complblname>: flag to compare 
                     two studies (default: False)
        <compdirname> : analysis directory of study to compare with
        <lblname>     : labelname to be used for <database> for plots
        <complblname> : labelname to be used for <compdatabase> for 
                        plots"""
       args=self.args
       try:
         createdaout=str2bool(args[args.index('-createdaout')+1])
       except ValueError:
         createdaout=True
       try:
         turnstep=args[args.index('-turnstep')+1]
       except ValueError:
         turnstep=100
       try:
         tmax=args[args.index('-tmax')+1]
       except ValueError:
         tmax=int(1.e6)
       db=SixDeskDB(study)
       try:
         ampmaxsurv=args[args.index('-ampmaxsurv')+1]
       except ValueError:
         ampmaxsurv=max(max(db.get_amplitudes()))
       try:
         ampmindavst=args[args.index('-amprangedavst')+1]
         ampmaxdavst=args[args.index('-amprangedavst')+2]
       except ValueError:
         ampmaxdavst=max(max(db.get_amplitudes()))
         ampmindavst=min(min(db.get_amplitudes()))
       try:
         plotlog=str2bool(args[args.index('-plotlog')+1])
       except ValueError:
         plotlog=False
       try:
         comp=str2bool(args[args.index('-comp')+1])
       except ValueError:
         comp=False
         compdirname=''
         lblname=''
         complblname=''
       # now handle exceptions if values are not well defined
       try:
         turnstep=int(float(turnstep))
       except ValueError:
         print('Error in command `da_vs_turns` - integer value expected for option `turnstep`')
         sys,exit(0)
       try:
         tmax=int(float(tmax))
       except ValueError:
         print('Error in command `da_vs_turns` - integer value expected for option `tmax`')
         sys,exit(0)
       try:
         ampmaxsurv=float(ampmaxsurv)
       except ValueError:
         print('Error in command `da_vs_turns` - float value expected for option `ampmaxsurv`')
         sys,exit(0)
       try:
         ampmindavst=float(ampmindavst)
       except ValueError:
         print('Error in command `da_vs_turns` - float values expected for option `amprangedavst`')
         sys,exit(0)
       try:
         ampmaxdavst=float(ampmaxdavst)
       except ValueError:
         print('Error in command `da_vs_turns` - float values expected for option `amprangedavst`')
         sys,exit(0)
       if(comp):
         try:
           compdirname=args[args.index('-compdirname')+1]
           lblname=args[args.index('-lblname')+1]
           complblname=args[args.index('-complblname')+1]
         except ValueError:
           print "Error for option -comp=True: If comp=True you have to specify the directory name of the comparison study (-compdirname) and the labelnames for plotting (-lblname,-complblname)"
           sys.exit(0)
       RunDaVsTurns(db,createdaout,turnstep,tmax,ampmaxsurv,ampmindavst,ampmaxdavst,plotlog,comp,compdirname,lblname,complblname)
    def interactive(self,study):
        """Open an IPython shell with a database loeaded as db
        Usage: sixdb <dbname> interactive
        """
        import IPython
        import matplotlib.pyplot as pl
        import numpy, scipy
        db=SixDeskDB(study)
        argv=sys.argv[:1]+['quiet','--pylab']
        print
        print """job_hllhc10_test10.db open as db
Example:
print db.get_col('sturns1',1,45)
db.plot_col('sturns1',1,45)
db.plot_polar_col('sturns1',1)
"""
        print
        IPython.start_ipython(user_ns={'db':db},argv=argv)
    def set(self,study):
        """Redefine environment variables
        Usage: sixdb <dbname> set <key1> <value1> ...
        """
        keys=self.args[2::2]
        values=self.args[3::2]
        if len(keys)==len(values):
             lst=zip(keys,values)
             SixDeskDB(study).set_variable(lst,time.time())
        else:
             print "Error: Unmatched name value arguments"
    def missing_jobs(self,study):
        """Compute missing jobs
        Usage: sixdb <dbname> missing_jobs
        """
        SixDeskDB(study).missing_jobs()


if __name__=="__main__":
    import sys
    SixDB(sys.argv).run()
